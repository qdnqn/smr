// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://smr.qdnqn.com/terms",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/simplecontainer/smr"
        },
        "license": {
            "name": "GNU General Public License v3.0",
            "url": "https://github.com/simplecontainer/smr/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/database/keys": {
            "get": {
                "description": "get all keys by prefix in the key-value store",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "Get keys by prefix in the key-value store",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    }
                }
            }
        },
        "/database/{key}": {
            "get": {
                "description": "get string by key from the key-value store",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "Get value from the key-value store",
                "parameters": [
                    {
                        "type": "string",
                        "description": "RandomKey",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "set string by key in the key-value store",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "Set value in the key-value store",
                "parameters": [
                    {
                        "type": "string",
                        "description": "RandomKey",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "value",
                        "name": "value",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Kv"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    }
                }
            }
        },
        "/database/{key}/{prefix}": {
            "get": {
                "description": "get all keys by prefix in the key-value store",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "Get keys by prefix in the key-value store",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/database.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Kv": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "database.Response": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "error": {
                    "type": "boolean"
                },
                "errorExplanation": {
                    "type": "string"
                },
                "explanation": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Simple container manager API",
	Description:      "This is a container orchestrator service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
